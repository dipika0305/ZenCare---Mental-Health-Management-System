/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SupplimentsRole;

import model.EcoSys;
import model.Enterprise.Enterprise;
import model.Graph;
import model.Organization.Organization;
import model.Organization.OrgSuppliments;
import model.UserAccount.UserAccount;
import model.WorkQueue.SupplimentsWorkRequest;
import model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vidhi
 */
public class SupplimentsWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSys business;
    private UserAccount userAccount;
    private OrgSuppliments supplimentsOrganization;
    Enterprise enterprise;
     Organization organization;
     HashMap<String,Integer> m;
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public SupplimentsWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSys business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.supplimentsOrganization = (OrgSuppliments)organization;
        this.enterprise=enterprise;
        this.organization=organization;
        valueLabel.setText(enterprise.getName());
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : supplimentsOrganization.getWorkQueue().getWorkRequestList()){
            
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender();
              if(((SupplimentsWorkRequest)request).getSupplimentreceiver()!=null){
                row[2] = ((SupplimentsWorkRequest)request).getSupplimentreceiver();
            }else{
                row[2] = null;
            }
            row[3] = ((SupplimentsWorkRequest)request).getSupplimentStatus();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, 375, 96));

        assignJButton.setBackground(new java.awt.Color(255, 255, 255));
        assignJButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 440, -1, -1));

        processJButton.setBackground(new java.awt.Color(255, 255, 255));
        processJButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, -1, -1));

        refreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshJButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 240, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, -1));

        valueLabel.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!");
            return;
        }
        
          SupplimentsWorkRequest request = (SupplimentsWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        
        if(request.getSupplimentreceiver() == null){
            request.setSupplimentreceiver(userAccount);
            request.setStatus("Pending");
            populateTable();
            JOptionPane.showMessageDialog(null, "You are assigned as a dietician to this patient!!");
        }else if(request.getSupplimentreceiver() == userAccount) {
             JOptionPane.showMessageDialog(null, "you are already the dietician for this patient!!");
            return;
        }else if(request.getSupplimentreceiver()!=userAccount){
            JOptionPane.showMessageDialog(null, "Dieticain already assigned!!");
            return;
        }else{
             JOptionPane.showMessageDialog(null, "error allocating dietician!!");
            return;
        }
        populateTable();
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!");
            return;
        }
        
        SupplimentsWorkRequest request = (SupplimentsWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
        if(request.getSupplimentreceiver()==null){
             JOptionPane.showMessageDialog(null, "Assign a dietician first!!!!");
            return;
        }
        else if(request.getSupplimentreceiver() == userAccount){
            request.setStatus("Processing");
        
            ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }else if(request.getSupplimentreceiver()!=userAccount){
             JOptionPane.showMessageDialog(null, "You cant access this patient!!");
            return;
        }else{
            JOptionPane.showMessageDialog(null, "error in proceeding!");
            return;
        }
       
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    
    
     public HashMap<String,Integer> createHashMap()
    {
        HashMap<String,Integer> map=new HashMap<String,Integer>();
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(request.getType()!=null)
            {
           if(request.getType().equals("Patient")&& request.getReceiver()!= null ) 
 
               //&& request.getReceiver().equals(userAccount))
           {
                    ///based on granting status we can know- for ex how many are approved, rejected , pending
                     String key=((SupplimentsWorkRequest)request).getSupplimentStatus();
                    if(request.getState()!=null)
                    {
                        map.put(key, map.containsKey(key)?map.get(key)+1:1);
                    }
            }
            //}
        }
        }
       return map; 
    }
    public void createPiechart(HashMap<String,Integer> m)
    {
        Graph g=new Graph();
       //ChartFrame c= 
               g.create(m);
        
//        JPanel imgPanel=new JPanel();
//            
//            
//            imgPanel.add(c);
//            imgPanel.setVisible(true);
//            add(imgPanel);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
