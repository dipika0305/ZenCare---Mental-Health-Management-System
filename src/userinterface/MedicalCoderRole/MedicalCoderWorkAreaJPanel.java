/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.MedicalCoderRole;

import userinterface.DoctorRole.*;
import model.EcoSys;
import model.Enterprise.Enterprise;
import model.Graph;
import model.Organization.OrgMedicalCoder;
import model.UserAccount.UserAccount;
import model.WorkQueue.DiseaseWorkRequest;
import model.WorkQueue.PatientWorkRequest;
import model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vidhi
 */
public class MedicalCoderWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private OrgMedicalCoder organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    HashMap<String,Integer> m;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public MedicalCoderWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, OrgMedicalCoder organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
    }
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            String result = ((DiseaseWorkRequest) request).getDiseaseinfo();
            row[3] = result == null ? "Waiting" : result;
            
            model.addRow(row);
        }
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        dashboardJButton = new javax.swing.JButton();
        enterpriseLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Disease", "Receiver", "Status", "DiseaseInfo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 230, -1, 120));

        requestTestJButton.setBackground(new java.awt.Color(0, 153, 153));
        requestTestJButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        requestTestJButton.setForeground(new java.awt.Color(255, 255, 255));
        requestTestJButton.setText("REQUEST INFO");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, -1, 30));

        refreshTestJButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshTestJButton.setForeground(new java.awt.Color(0, 153, 153));
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        enterpriseLabel.setText("Enterprise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 90, 30));

        valueLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 158, 26));

        dashboardJButton.setBackground(new java.awt.Color(0, 153, 153));
        dashboardJButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        dashboardJButton.setForeground(new java.awt.Color(255, 255, 255));
        dashboardJButton.setText("DASHBOARD");
        dashboardJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardJButtonActionPerformed(evt);
            }
        });
        add(dashboardJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 400, 140, 30));

        enterpriseLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        enterpriseLabel2.setText("MEDICAL CODER");
        add(enterpriseLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 210, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestDiseaseInfoJPanel", new RequestDiseaseInfoJPanel(userProcessContainer, userAccount, enterprise));
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed
public HashMap<String,Integer> createHashMap()
    {
         HashMap<String,Integer> map=new HashMap<String,Integer>();
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request.getType()!=null)
            {
           if(request.getType().equals("Disease")&& request.getReceiver()!= null) 
 
               //&& request.getReceiver().equals(userAccount))
           {
               DiseaseWorkRequest p=(DiseaseWorkRequest)request;
                     String key=p.getDiseaseinfo();
                    if(p.getDiseaseinfo()!=null)
                    {
                        map.put(key, map.containsKey(key)?map.get(key)+1:1);
                    }
            }
            //}
        }
        }
       return map;
    }
 public void createPiechart(HashMap<String,Integer> m)
    {
        Graph g=new Graph();
            g.create(m);
  
        
    }
    private void dashboardJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardJButtonActionPerformed
        m=createHashMap();
        createPiechart(m);
    }//GEN-LAST:event_dashboardJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dashboardJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
