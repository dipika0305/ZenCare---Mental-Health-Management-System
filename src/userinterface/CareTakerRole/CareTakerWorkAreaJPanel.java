/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CareTakerRole;

import model.EcoSys;
import model.Enterprise.Enterprise;
import model.Graph;
import model.Organization.OrgCareTaker;
import model.Organization.OrgNurse;
import model.Organization.Organization;
import model.UserAccount.UserAccount;
import model.WorkQueue.CareTakerWorkRequest;
import model.WorkQueue.SupplimentsWorkRequest;
import model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dipikam
 */
public class CareTakerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSys business;
    private UserAccount userAccount;
    private OrgCareTaker caretakerOrganization;
    private OrgNurse nurseOrganization;
    private Organization organization;
    private Enterprise enterprise;
     HashMap<String,Integer> m;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public CareTakerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, EcoSys business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        //this.caretakerOrganization = (CareTakerOrganization)organization;
        this.organization=organization;
        this.enterprise=enterprise;
        name.setText(enterprise.getName());
        populateTable();
        //populateTable1();
    }
    
   public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) workCareTakerJTable.getModel();
        
      model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender();
             if(((CareTakerWorkRequest)request).getCaretakerreceiver()!=null){
                row[2] = ((CareTakerWorkRequest)request).getCaretakerreceiver();
            }else{
                row[2] = null;
            }
       
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workCareTakerJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        assignCareTaker = new javax.swing.JButton();
        careTakerCreate = new javax.swing.JButton();
        name = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workCareTakerJTable.setFont(new java.awt.Font("Perpetua Titling MT", 1, 13)); // NOI18N
        workCareTakerJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workCareTakerJTable);
        if (workCareTakerJTable.getColumnModel().getColumnCount() > 0) {
            workCareTakerJTable.getColumnModel().getColumn(0).setResizable(false);
            workCareTakerJTable.getColumnModel().getColumn(1).setResizable(false);
            workCareTakerJTable.getColumnModel().getColumn(2).setResizable(false);
            workCareTakerJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 410, 110));

        refreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshJButton.setFont(new java.awt.Font("Perpetua Titling MT", 1, 13)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 150, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        assignCareTaker.setBackground(new java.awt.Color(255, 255, 255));
        assignCareTaker.setFont(new java.awt.Font("Perpetua Titling MT", 1, 13)); // NOI18N
        assignCareTaker.setText("Assign Care Taker To me");
        assignCareTaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignCareTakerActionPerformed(evt);
            }
        });
        add(assignCareTaker, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, -1, -1));

        careTakerCreate.setBackground(new java.awt.Color(255, 255, 255));
        careTakerCreate.setFont(new java.awt.Font("Perpetua Titling MT", 1, 13)); // NOI18N
        careTakerCreate.setText("Process");
        careTakerCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                careTakerCreateActionPerformed(evt);
            }
        });
        add(careTakerCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 370, -1, -1));

        name.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        name.setText("<name>");
        add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 90, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignCareTakerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignCareTakerActionPerformed
        // TODO add your handling code here:
          int selectedRow = workCareTakerJTable.getSelectedRow();
        
        if (selectedRow < 0){
             JOptionPane.showMessageDialog(null,"Please select a row!!");
           
            return;
        }
        
        
        
        CareTakerWorkRequest request = (CareTakerWorkRequest)workCareTakerJTable.getValueAt(selectedRow, 0);
        
        
        if(request.getCaretakerreceiver()==null){
            request.setCaretakerreceiver(userAccount);
            request.setCaretakerStatus("Pending");
            populateTable();
        
            JOptionPane.showMessageDialog(null,"updated");
            
        }else if(request.getCaretakerreceiver()==userAccount){
            JOptionPane.showMessageDialog(null, "Care Taker already assigned to you!!");
            return;
        }else if(request.getCaretakerreceiver()!=userAccount){
            JOptionPane.showMessageDialog(null, "Care Taker already assigned to someone else!!");
            return;
        }else{
            JOptionPane.showMessageDialog(null, "error in allocating caretaker");
            return;
        }
        
        
            
           
        
       
    }//GEN-LAST:event_assignCareTakerActionPerformed

    private void careTakerCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_careTakerCreateActionPerformed
        // TODO add your handling code here:
        
        
        
        
        int selectedRow = workCareTakerJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!!");
            return;
        }
        

        CareTakerWorkRequest request = (CareTakerWorkRequest)workCareTakerJTable.getValueAt(selectedRow, 0);
        
        
        
        
        if(request.getCaretakerreceiver()== null){
            JOptionPane.showMessageDialog(null, "Assign caretaker first!!");
            return;
       
        
        } if(request.getCaretakerreceiver() == userAccount){
             request.setCaretakerStatus("Processing");
            CareTakerProcessWorkRequestJPanel processWorkRequestJPanel = new CareTakerProcessWorkRequestJPanel(userProcessContainer, request);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else if (request.getCaretakerreceiver() != userAccount){
             JOptionPane.showMessageDialog(null, "Care Taker assigned to someone else!!");
            return;
        }
        
        
        
    }//GEN-LAST:event_careTakerCreateActionPerformed

    
    public HashMap<String,Integer> createHashMap()
    {
        HashMap<String,Integer> map=new HashMap<String,Integer>();
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(request.getType()!=null)
            {
           if(request.getType().equals("Patient")&& request.getReceiver()!= null ) 
 
               //&& request.getReceiver().equals(userAccount))
           {
                    ///based on granting status we can know- for ex how many are approved, rejected , pending
                     String key=((CareTakerWorkRequest)request).getCaretakerStatus();
                    if(request.getState()!=null)
                    {
                        map.put(key, map.containsKey(key)?map.get(key)+1:1);
                    }
            }
            //}
        }
        }
       return map; 
    }
    public void createPiechart(HashMap<String,Integer> m)
    {
        Graph g=new Graph();
       //ChartFrame c= 
               g.create(m);
        
//        JPanel imgPanel=new JPanel();
//            
//            
//            imgPanel.add(c);
//            imgPanel.setVisible(true);
//            add(imgPanel);
        
    }
         
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignCareTaker;
    private javax.swing.JButton careTakerCreate;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel name;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workCareTakerJTable;
    // End of variables declaration//GEN-END:variables
}
